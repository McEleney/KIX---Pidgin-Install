;Pidgin installer KIX script
;Copyright 2011 McEleney Motors <john.rogers@mceleney.com>
;
;Edit the following:
;
;Server hosting the pidgin installer
$SERVERNAME = "SERVER"
;Path to Pidgin or Pidgin-offline install file, accounttemplate, etc
;Include trailing backslash
$INSTALLDIR = "installs\pidgin\"
;Name of the actual Pidgin install file
$INSTALLER = "pidgin-offline.exe"
;Name of your Jabber server
;i.e. your users are username/JABBERSERVER
$JABBERSERVER = "JABBERSERVER"
;Name of your server's certificate (usually the same as your server name)
$JABBERCERT = "JABBERCERT"
;Language of the dictionary files. See README.
$DICT = "en_US"
;-----------------------------------------------
;You shouldn't need to edit anything below this.
;-----------------------------------------------

$installerpath = "\\$SERVERNAME\" + $INSTALLDIR
$installerexe = $installerpath + $INSTALLER
If Not Exist($installerexe)
	? $installerexe + " does not exist! Aborting!"
	Exit
EndIf
;Get version of installation file
$pVersion = GetFileVersion($installerexe,"ProductVersion")
;Set some path variables
$PROGRAMFILES = EXPANDENVIRONMENTVARS(%PROGRAMFILES%)
$SYSTEMROOT = EXPANDENVIRONMENTVARS(%SYSTEMROOT%)
$APPDATA = EXPANDENVIRONMENTVARS(%APPDATA%)

If Not Exist("$APPDATA\.purple\accounts.xml")
	? "No accounts.xml file, creating one..."
	;Generate username in the format Firstname.Lastname
	$username = Replace(@FULLNAME, " ", ".")
	;Generate simple password based on user's last name. This works for our environment,
	;where it is understood that IM chats are not secure. It may not work for you!
	$password = Split(@FULLNAME, " ")
	$password = $password[1] + "1"
	$password = Replace($password,"a","4")
	$password = Replace($password,"e","3")
	$password = Replace($password,"i","1")
	$password = Replace($password,"o","0")
	$password = Replace($password,"u","7")
	;Load account template file
	? "Loading $installerpath\accounttemplate.xml..."
	$accountfile = ReadFile($installerpath + 'accounttemplate.xml')
	$i = 0
	;Customize the template with the user's info. Probably not the most efficient 
	;method, but it gets the job done.
	For Each $line In $accountfile
		$line = Replace($line,'!JABBERSERVER!',$JABBERSERVER)
		$line = Replace($line,'!USERNAME!',$username)
		$line = Replace($line,'!PASSWORD!',$password)
		$line = Replace($line,'!FULLNAME!',@FULLNAME)
		$accountfile[$i] = $line
		$i = $i + 1
	Next
	;This is where Pidgin stores its data
	If Not Exist("$APPDATA\.purple")
		MD "$APPDATA\.purple"
	EndIf
	? "Writing $APPDATA\.purple\accounts.xml..."
	WriteFile("$APPDATA\.purple\accounts.xml",$accountfile)
	If Exist("$APPDATA\.purple\accounts.xml")
		? "Wrote default accounts.xml file!"
	Else
		? "Couldn't create accounts.xml, aborting!"
		Exit
	EndIf
Else
	? "Found accounts.xml file!"
EndIf
;Copy over certificates file. Make sure you set this variable above!
If Not Exist("$APPDATA\.purple\certificates\x509\tls_peers\$JABBERCERT")
	? "Copying certificates..."
	Copy $installerpath + "certificates\" "$APPDATA\.purple\certificates\" /s
EndIf
If Exist("$PROGRAMFILES\Pidgin\Pidgin.exe") 
	? "Pidgin is installed already!"
	? "Checking if upgrade is available..."
	$cVersion = GetFileVersion("$PROGRAMFILES\Pidgin\Pidgin.exe")
	? "Current version:   $cVersion"
	? "Available version: $pVersion"
	If Not $cVersion = $pVersion
		? "Upgrading..."
		;Can't upgrade Pidgin if it's already running, so kill it.
		Shell("$SYSTEMROOT\system32\taskkill.exe /F /IM pidgin.exe")
		;Remove autostart in case Pidgin wasn't running yet
		;because we don't want it to start during the upgrade.
		DelValue("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run","Pidgin")
		Shell("\\$SERVERNAME\installs\pidgin\pidgin-offline.exe /S")	
		WriteValue("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run","Pidgin","$PROGRAMFILES\Pidgin\Pidgin.exe","REG_SZ")
		? "Done!"
	EndIf
Else
	? "Pidgin is not installed!"
	? "Installing Pidgin in silent mode..."
	Shell("\\$SERVERNAME\installs\pidgin\pidgin-offline.exe /S /DS=1 /SMS=1")
	? "Setting Pidgin to run at startup..."
	WriteValue("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run","Pidgin","$PROGRAMFILES\Pidgin\Pidgin.exe","REG_SZ")
	? "Done!"
EndIf

;Check for spellcheck files and copy if they're not there
If Not Exist("$PROGRAMFILES\Pidgin\spellcheck\share\enchant\myspell\$DICT.dic")
	If Not Exist("$PROGRAMFILES\Pidgin\spellcheck\share\enchant\myspell")
		MD "$PROGRAMFILES\Pidgin\spellcheck\share"
		MD "$PROGRAMFILES\Pidgin\spellcheck\share\enchant"
		MD "$PROGRAMFILES\Pidgin\spellcheck\share\enchant\myspell"
	EndIf
	? "Copying spellcheck dictionaries..."
	Copy $installerpath + "dict\*" "$PROGRAMFILES\Pidgin\spellcheck\share\enchant\myspell\"
EndIf

;The following functions taken from http://www.kixtart.org/udf/
;Why reinvent the wheel?
Function ReadFile($file)
	Dim $lf, $f, $_, $t
	$lf=chr(10)
	$f=freefilehandle
	$_=open($f,$file)
		if @error   exit @error   endif
		do $t=$t+$lf+readline($f) until @error
		$_=close($f)
	$ReadFile=split(substr($t,2),$lf)
EndFunction

Function WriteFile($file,$array)
	Dim $, $f, $line
	If Not VarType($Array) & 8192    Exit(1)        EndIf
	$f=freefilehandle
	$=open($f,$file,5)
		if @error   exit @error   endif
		for each $line in $array
			$=writeline($f,$line+@crlf)
			if @error   exit @error   endif
		next
		$=close($f)
EndFunction

Function Replace($String,$SS,$RS)
	$Replace=Split($String,$SS)
	$Replace=Join($Replace,$RS)
EndFunction
